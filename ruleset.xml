<?xml version="1.0"?>
<ruleset name="GoodOmensCS"
	namespace="GoodOmensCS\WP"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../vendor/squizlabs/php_codesniffer/phpcs.xsd">

	<description>Good Omens WordPress Coding Standards.</description>

	<exclude-pattern>*/phpunit.xml*</exclude-pattern>
	<exclude-pattern>*/languages/*</exclude-pattern>
	<exclude-pattern>*/tests/*</exclude-pattern>

	<exclude-pattern>*/.git/*</exclude-pattern>
	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*/vendor/*</exclude-pattern>


	<file>.</file>
	<arg name="extensions" value="php" />
	<arg name="encoding" value="UTF-8" />

	<!--
	####
	Excludes some sniffs from WPCS-Extra

	Some notes were copied from YoastCS
	#############
	-->

	<rule ref="WordPress-Extra" >

		<properties>
			<property name="minimum_supported_version" value="4.9"/>
		</properties>

		<exclude name="Generic.Arrays.DisallowShortArraySyntax"/>
		<exclude name="Generic.Files.LowercasedFilename"/>
		<exclude name="Generic.Files.LowercasedFilename.NotFound"/>
		<exclude name="Generic.PHP.DisallowShortOpenTag.Found" />
		<exclude name="Generic.PHP.DisallowShortOpenTag.EchoFound" />
		<exclude name="WordPress.Files.FileName.InvalidClassFileName"/>
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase"/>

		<!-- If a conscious choice has been made for a non-strict comparison, that's ok.
			I.e. when `strict` has been explicitely set to `false` in an array comparison,
			it will be allowed. -->
		<exclude name="WordPress.PHP.StrictInArray.FoundNonStrictFalse"/>
		<exclude name="WordPress.PHP.YodaConditions" />
	</rule>

	<!--
	####
	Changing Rules
	#############
	-->

	<!-- Ignore lowercase filenames -->
	<rule ref="WordPress.Security.EscapeOutput.OutputNotEscaped">
		<type>Warning</type>
	</rule>
	<rule ref="Generic.Formatting.MultipleStatementAlignment">
		<type>error</type>
	</rule>

	<rule ref="WordPress.WP.AlternativeFunctions">
		<properties>
			<property name="exclude" type="array">
				<element value="json_encode"/>
				<element value="file_get_contents"/>
			</property>
		</properties>
	</rule>


	<!--
	####
	New Rules
	#############
	-->


	<!-- QA: Function declarations should not contain parameters which will never be used. -->
	<!-- PHPCS 3.4.0: This sniff will be added to WPCS 2.x in due time and can then be removed from this ruleset.
		 Related: https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1510 -->
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.Found"/>
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter.FoundAfterLastUsed"/>

	<!-- Error prevention: Ensure no git conflicts make it into the code base. -->
	<!-- PHPCS 3.4.0: This sniff will be added to WPCS 2.x in due time and can then be removed from this ruleset.
		 Related: https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1500 -->
	<rule ref="Generic.VersionControl.GitMergeConflict"/>

	<!-- CS: no space between an increment/decrement operator and the variable it applies to. -->
	<!-- PHPCS 3.4.0: This sniff will be added to WPCS 2.x in due time and can then be removed from this ruleset.
		 Related: https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1511 -->
	<rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>

	<!-- CS: ensure exactly one blank line before each property declaration. -->
	<rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>

	<!--
	#############################################################################
	Config PHPCompatibility and PHPCompatibilityWP
	#############################################################################
	-->
	<config name="testVersion" value="5.6-"/>
	<rule ref="PHPCompatibility"/>
	<rule ref="PHPCompatibilityWP">
		<include-pattern>*\.php$</include-pattern>
	</rule>

</ruleset>
